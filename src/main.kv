#:import hex_from_color kivy.utils.get_hex_from_color
#:import web_open webbrowser.open
#:import Thread threading.Thread
<CustomOneLineIconListItem>:

    IconLeftWidget:
        icon: root.icon


<Main>:

    MDBoxLayout:
        orientation: 'vertical'
        spacing: dp(10)
        padding: dp(20)

        MDBoxLayout:
            adaptive_height: True
            MDIconButton:
                icon: 'magnify'
            MDTextField:
                id: search_field
                hint_text: 'Search process'
                on_text: root.fast_answer(self.text.lower())
            MDIconButton:
                icon: 'menu'
                on_release: app.navigator.ids.nav_drawer.set_state("open")

        MDBoxLayout:
            adaptive_height: True
            MDCheckbox:
                id: multiple_select
                size_hint: None, None
                size: "48dp", "48dp"
                pos_hint: {'center_x': .5, 'center_y': .5}
                on_press: app.selection_lock.acquire()
                on_release:
                    app.select_rows(self.active)
                    app.selection_lock.release()
                selected_color: app.theme_cls.primary_color
                unselected_color: app.theme_cls.secondary_text_color
            AnchorLayout:
                anchor_x: "center"
                anchor_y: "center"
                size_hint: None, None
                size: 50, 50
                IButton:
                    id: order
                    size_hint: None, None
                    size: 32, 32
                    icon: "arrow-up" if app.desc else "arrow-down"
                    color: app.theme_cls.opposite_bg_normal
                    on_release: app.desc = not app.desc
            LButton:
                size_hint_x: None
                width: "48dp"
                text: "PID"
                order_name: 'proc_pid'
            LButton:
                text: "Process Name"
                order_name: 'proc_name'
            LButton:
                text: "CPU Usage"
                order_name: 'proc_cpu'
            LButton:
                text: "Memory Usage"
                order_name: 'proc_mem'

        RecycleView:
            id: rv
            viewclass: 'ProcessCell'

            RecycleBoxLayout:
                default_size: None, app.proc_height
                default_size_hint: 1, None
                size_hint_y: None
                height: self.minimum_height
                orientation: 'vertical'

        MDBoxLayout:
            adaptive_height: True
            MDIconButton:
                icon: "arrow-up-drop-circle-outline"
                on_release: rv.scroll_y = 1
            MDIconButton:
                icon: "arrow-down-drop-circle-outline"
                on_release: rv.scroll_y = 0
            MDLabel:
                id: selection_label
                shorten: True
                shorten_from: "left"
                color: app.theme_cls.opposite_bg_normal
            MDBoxLayout:
                adaptive_width: True
                spacing: "10dp"
                MDRaisedButton:
                    text: "KILL"
                    on_release: Thread(target=app.kill_selected).start()
                MDRaisedButton:
                    text: "THE CHILDREN TOO"
                    on_release: Thread(target=app.kill_selected_and_children).start()

<ProcessCell>
    adaptive_height: True
    RVCheckBox:
        size_hint: None, None
        size: "48dp", app.proc_height
        pos_hint: {'center_x': .5, 'center_y': .5}
        active: root.proc_pid in app.current_selection
        on_active: app.select_row(root.proc_pid, self.active, self)
        selected_color: app.theme_cls.primary_color
        unselected_color: app.theme_cls.secondary_text_color
    AnchorLayout:
        anchor_x: "center"
        anchor_y: "center"
        size_hint: None, None
        size: 50, app.proc_height
        MDIcon:
            size_hint: None, None
            size: 32, 32
            icon: root.proc_icon
    MDLabel:
        size_hint_x: None
        width: "48dp"
        text: str(root.proc_pid)
        color: app.theme_cls.opposite_bg_normal
        font_style: app.proc_style
    MDLabel:
        text: root.proc_name
        color: app.theme_cls.opposite_bg_normal
        font_style: app.proc_style
    MDLabel:
        text: "{:.4f}%".format(root.proc_cpu)
        halign: "center"
        color: app.theme_cls.opposite_bg_normal
        font_style: app.proc_style
    MDLabel:
        text: "{:.4f}%".format(root.proc_mem)
        halign: "center"
        color: app.theme_cls.opposite_bg_normal
        font_style: app.proc_style

<LButton@ButtonBehavior+MDLabel>
    order_name: 'proc_pid'
    ordered: self.order_name == app.order_by
    canvas.before:
        Color:
            rgba: app.theme_cls.primary_color if self.ordered else (0, 0, 0, 0)
        Rectangle:
            pos: self.pos
            size: self.size
    on_release:
        app.desc = not app.desc if self.ordered else app.desc
        app.order_by = self.order_name
    halign: "center"
    color: (1, 1, 1, 1) if self.ordered else app.theme_cls.opposite_bg_normal

<IButton@ButtonBehavior+MDIcon>
    color: app.theme_cls.opposite_bg_normal

<MiniProcessCell>
    text: self.proc_name
    on_size:
        self.ids._right_container.width = container.width
        self.ids._right_container.x = container.width
    IconLeftWidget:
        size_hint: None, None
        size: 32, 32
        icon: root.proc_icon
    Container:
        id: container
        MDLabel:
            text: root.proc_pid
            halign: "center"
            color: app.theme_cls.opposite_bg_normal
        MDLabel:
            text: root.proc_user
            halign: "center"
            font_size: self.font_size if root.little_font is None else root.little_font
            color: app.theme_cls.opposite_bg_normal

<Container@IRightBodyTouch+MDBoxLayout>

<Navigator>
    ScreenManager
        id: sm
    MDNavigationDrawer:
        id: nav_drawer
        anchor: 'right'
        on_state:
            app.check_for_updates(self.state)

        MDBoxLayout:
            orientation: 'vertical'
            MDBoxLayout:
                adaptive_height: True
                MDLabel:
                    text: 'Killer' if app.version is None else f'Killer {app.version}'
                    halign: 'center'
                    font_style: 'H6'
                    color: app.theme_cls.opposite_bg_normal

            ScrollView:
                scroll_type: ['bars']
                bar_width: dp(10)
                MDBoxLayout:
                    orientation: "vertical"
                    adaptive_height: True
                    padding: dp(20), 0, 0, 0
                    MDBoxLayout:
                        adaptive_height: True
                        MDLabel:
                            text: 'Zoom'
                            color: app.theme_cls.opposite_bg_normal
                        CheckZoom:
                            zid: '0.5x'
                        MDLabel:
                            text: '0.5x'
                            color: app.theme_cls.opposite_bg_normal
                        CheckZoom:
                            zid: '1x'
                        MDLabel:
                            text: '1x'
                            color: app.theme_cls.opposite_bg_normal
                    MDBoxLayout:
                        adaptive_height: True
                        padding: 0, 0, dp(20), 0
                        MDLabel:
                            text: 'Refresh interval'
                            color: app.theme_cls.opposite_bg_normal
                        MyTextInput:
                            text: f'{app.refresh_interval}'
                            size_hint_x: None
                            width: self.minimum_width + dp(10)
                            on_text: app.refresh_interval = app.refresh_interval if self.error else self.text

            MDBoxLayout:
                adaptive_height: True
                MDLabel:
                    href: 'https://github.com/ntaraujo/killer'
                    a: 'Killer {}'.format(app.update)
                    a_color: hex_from_color(app.theme_cls.primary_color)
                    main_text: '[ref={}][color={}]{}[/color][/ref] available!'.format(self.href, self.a_color, self.a)
                    text: '' if app.update is None else self.main_text
                    markup: True
                    halign: 'center'
                    color: app.theme_cls.opposite_bg_normal
                    on_ref_press: web_open(self.href)
                MDIconButton:
                    icon: 'white-balance-sunny' if app.dark else 'moon-waxing-crescent'
                    on_release: app.dark = not app.dark

<CheckZoom@MDCheckbox>:
    zid: '0.5x'
    group: 'zoom'
    size_hint: None, None
    size: dp(48), dp(48)
    on_active: app.zoom = self.zid
    on_release: self.active = app.zoom == self.zid
    active: app.zoom == self.zid
    selected_color: app.theme_cls.primary_color
    unselected_color: app.theme_cls.secondary_text_color